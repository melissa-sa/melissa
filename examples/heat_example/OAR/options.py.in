###################################################################
#                            Melissa                              #
#-----------------------------------------------------------------#
#   COPYRIGHT (C) 2017  by INRIA and EDF. ALL RIGHTS RESERVED.    #
#                                                                 #
# This source is covered by the BSD 3-Clause License.             #
# Refer to the  LICENSE file for further information.             #
#                                                                 #
#-----------------------------------------------------------------#
#  Original Contributors:                                         #
#    Theophile Terraz,                                            #
#    Bruno Raffin,                                                #
#    Alejandro Ribes,                                             #
#    Bertrand Iooss,                                              #
###################################################################


"""
    User defined options module
"""
import os
import time
import numpy as np
import subprocess
import getpass
import imp
import socket
#from matplotlib import pyplot as plt
#from matplotlib import cm
from string import Template
from shutil import copyfile


USERNAME = getpass.getuser()
EXECUTABLE='heatc'
NODES_SERVER = 1
NODES_GROUP = 1
WALLTIME_SERVER = "0:10:00"
WALLTIME_SIMU = "0:05:00"
NODES_SIMU = NODES_GROUP
PROC_PER_NODE = 1

def launch_server(server):
    if (not os.path.isdir(STUDY_OPTIONS['working_directory'])):
        os.mkdir(STUDY_OPTIONS['working_directory'])
    os.chdir(STUDY_OPTIONS['working_directory'])
    #create_run_server(server)
    server_cmd = "mpirun -n "+str(PROC_PER_NODE*NODES_SERVER) + " " +server.path+"/melissa_server "+server.cmd_opt+" &"

    content = ""
    file=open("@EXAMPLES_DIR@/heat_example/study_OAR/scripts/run_server.sh", "r")
    content = Template(file.read()).substitute(WALLTIME_SERVER=str(WALLTIME_SERVER),
                                               NODES_SERVER=str(NODES_SERVER),
                                               PROC_PER_NODE=str(PROC_PER_NODE),
                                               SERVER_CMD=str(server_cmd),
                                               OAR_JOB_ID="${OAR_JOB_ID}")
    file.close()
    file=open("run_server.sh", "w")
    file.write(content)
    file.close()
    os.system("chmod 744 run_server.sh")

    proc = subprocess.Popen('oarsub -S "./run_server.sh"',
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            shell=True,
                            universal_newlines=True)
    # get the job ID
    (out, err) = proc.communicate()
    if len(out.split()) > 0:
        server.job_id = out.split("OAR_JOB_ID=")[1]
    else:
        print(err)
    os.chdir(STUDY_OPTIONS['working_directory'])

def launch_simu(simulation):
    if (not os.path.isdir(STUDY_OPTIONS['working_directory']+"/simu"+str(simulation.group_id))):
        os.mkdir(STUDY_OPTIONS['working_directory']+"/simu"+str(simulation.group_id))
    os.chdir(STUDY_OPTIONS['working_directory']+"/simu"+str(simulation.group_id))
    copyfile(STUDY_OPTIONS['working_directory']+'/server_name.txt' , './server_name.txt')
    if MELISSA_STATS['sobol_indices']:
        command = 'mpirun '
        for i in range(STUDY_OPTIONS['nb_parameters'] + 2):
            command += ' '.join(('-n',
                                 str(PROC_PER_NODE*NODES_SIMU),
                                 '-x',
                                 'MELISSA_SIMU_ID='+str(simulation.simu_id[i]),
                                 '@EXAMPLES_DIR@/heat_example/solver/install/bin/'+EXECUTABLE,
                                 ' '.join(str(j) for j in simulation.param_set[i]),
                                 ': '))
        command = command[:-2]
    else:
        command = 'mpirun '
        for i in range(simulation.size):
            command += ' '.join(('-n',
                                 str(PROC_PER_NODE*NODES_SIMU),
                                 '-x',
                                 'MELISSA_SIMU_ID='+str(simulation.simu_id[i]),
                                 '@EXAMPLES_DIR@/heat_example/solver/install/bin/'+EXECUTABLE,
                                 ' '.join(str(j) for j in simulation.param_set[i]),
                                 ': '))
        command = command[:-2]
    print(command[:-2])

    content = ""
    file=open("@EXAMPLES_DIR@/heat_example/study_OAR/scripts/run_simu.sh", "r")
    content = Template(file.read()).substitute(WALLTIME_SIMU=str(WALLTIME_SIMU),
                                               NODES_SIMU=str(NODES_SIMU*simulation.size),
                                               PROC_PER_NODE=str(PROC_PER_NODE),
                                               SIMU_CMD=str(command),
                                               SIMU_ID=str(simulation.group_id),
                                               COUPLING=str(simulation.coupling),
                                               SERVER_NODE_NAME=str(simulation.server_node_name),
                                               HOSTNAME=str("$(hostname)"))
    file.close()
    file=open("run_simu.sh", "w")
    file.write(content)
    file.close()
    os.system("chmod 744 run_simu.sh")

    proc = subprocess.Popen('oarsub -S "./run_simu.sh"',
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE,
                                  shell=True,
                                  universal_newlines=True)
    # get the job ID
    (out, err) = proc.communicate()
    if len(out.split()) > 0:
        simulation.job_id = out.split("OAR_JOB_ID=")[1]
    else:
        print(err)
    os.chdir(STUDY_OPTIONS['working_directory'])

def check_job(job):
    state = 0
    time.sleep(1)
    proc = subprocess.Popen("oarstat -s -j "+str(job.job_id),
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            shell=True,
                            universal_newlines=True)
    time.sleep(1)
    (out, err) = proc.communicate()
    if "Waiting" or "Hold" or "toLaunch" or "Launching" or "toAckReservation" in out:
        state = 0
    elif "Running" in out:
        state = 1
    else:
        state = 2
    job.job_status = state

def check_load():
    return True

def kill_job(job):
    print('killing job ...')
    os.system("oardel "+str(job.job_id))



def draw_param_set():
    param_set = np.zeros(STUDY_OPTIONS['nb_parameters'])
    for i in range(STUDY_OPTIONS['nb_parameters']):
        param_set[i] = np.random.uniform(0, 1)
    return param_set

STUDY_OPTIONS = {}
STUDY_OPTIONS['user_name'] = USERNAME
STUDY_OPTIONS['working_directory'] = '@EXAMPLES_DIR@/heat_example/study_OAR/STATS'
STUDY_OPTIONS['nb_parameters'] = 5                 # number of varying parameters of the study
STUDY_OPTIONS['sampling_size'] = 6                 # initial number of parameter sets
STUDY_OPTIONS['nb_timesteps'] = 100                # number of timesteps, from Melissa point of view
STUDY_OPTIONS['threshold_values'] = 0.7
STUDY_OPTIONS['quantile_values'] = [0.05,0.25,0.5,0.75,0.95]
STUDY_OPTIONS['field_names'] = ["heat1"]           # list of field names
STUDY_OPTIONS['simulation_timeout'] = 40           # simulations are restarted if no life sign for 40 seconds
STUDY_OPTIONS['checkpoint_interval'] = 20          # server checkpoints every 30 seconds
STUDY_OPTIONS['coupling'] = "MELISSA_COUPLING_MPI" # option for Sobol' simulation groups coupling
STUDY_OPTIONS['verbosity'] = 2                     # verbosity: 0: only errors, 1: errors + warnings, 2: usefull infos (default), 3: debug infos
STUDY_OPTIONS['batch_size'] = 1

MELISSA_STATS = {}
MELISSA_STATS['mean'] = True
MELISSA_STATS['variance'] = True
MELISSA_STATS['skewness'] = True
MELISSA_STATS['kurtosis'] = True
MELISSA_STATS['min'] = True
MELISSA_STATS['max'] = True
MELISSA_STATS['threshold_exceedance'] = False
MELISSA_STATS['quantiles'] = False
MELISSA_STATS['sobol_indices'] = False

USER_FUNCTIONS = {}
USER_FUNCTIONS['create_study'] = None
USER_FUNCTIONS['draw_parameter_set'] = draw_param_set
USER_FUNCTIONS['create_group'] = None
#if MELISSA_STATS['sobol_indices']:
#    USER_FUNCTIONS['launch_group'] = launch_group
#else:
USER_FUNCTIONS['launch_group'] = launch_simu
USER_FUNCTIONS['launch_server'] = launch_server
USER_FUNCTIONS['check_server_job'] = check_job
USER_FUNCTIONS['check_group_job'] = check_job
USER_FUNCTIONS['restart_server'] = launch_server
USER_FUNCTIONS['restart_group'] = None
USER_FUNCTIONS['check_scheduler_load'] = check_load
USER_FUNCTIONS['cancel_job'] = kill_job
USER_FUNCTIONS['postprocessing'] = None
USER_FUNCTIONS['finalize'] = None
