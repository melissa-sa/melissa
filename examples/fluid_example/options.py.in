###################################################################
#                            Melissa                              #
#-----------------------------------------------------------------#
#   COPYRIGHT (C) 2017  by INRIA and EDF. ALL RIGHTS RESERVED.    #
#                                                                 #
# This source is covered by the BSD 3-Clause License.             #
# Refer to the  LICENSE file for further information.             #
#                                                                 #
#-----------------------------------------------------------------#
#  Original Contributors:                                         #
#    Theophile Terraz,                                            #
#    Bruno Raffin,                                                #
#    Alejandro Ribes,                                             #
#    Bertrand Iooss,                                              #
###################################################################


"""
    User defined options module
"""
import os
import time
import numpy as np
import subprocess
import getpass
import imp
#from matplotlib import pyplot as plt
#from matplotlib import cm
from string import Template
from shutil import copyfile
from lxml import etree


USERNAME = getpass.getuser()
NODES_SERVER = 1
NODES_GROUP = 2
WALLTIME_SERVER = 600
WALLTIME_SIMU = 300

def call_bash(string):
    proc = subprocess.Popen(string,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            shell=True,
                            universal_newlines=True)
    (out, err) = proc.communicate()
    return{'out':remove_end_of_line(out),
           'err':remove_end_of_line(err)}

def remove_end_of_line(string):
    if len(string) > 0:
        return str(string[:len(string)-int(string[-1] == "\n")])
    else:
        return ""

def draw_param_set():
    param_set = np.zeros(STUDY_OPTIONS['nb_parameters'])
    RANGE_MIN_PARAM = np.zeros(STUDY_OPTIONS['nb_parameters'], float)
    RANGE_MAX_PARAM = np.ones(STUDY_OPTIONS['nb_parameters'], float)
    RANGE_MIN_PARAM[0] = 200
    RANGE_MAX_PARAM[0] = 500
    RANGE_MIN_PARAM[1] = 1
    RANGE_MAX_PARAM[1] = 2
    for i in range(STUDY_OPTIONS['nb_parameters']):
        param_set[i] = np.random.uniform(RANGE_MIN_PARAM[i],
                                         RANGE_MAX_PARAM[i])
    param_set[1]=param_set[1]*10**(-1*np.random.randint(0,5))
    return param_set

def launch_server(server):
    if (not os.path.isdir(STUDY_OPTIONS['working_directory'])):
        os.mkdir(STUDY_OPTIONS['working_directory'])
    os.chdir(STUDY_OPTIONS['working_directory'])
    print('mpirun ' + ' -n '+str(NODES_SERVER) + ' ' + server.path + '/melissa_server ' + server.cmd_opt + ' &')
    server.job_id = subprocess.Popen(('mpirun ' +
                                      ' -n '+str(NODES_SERVER) +
                                      ' ' + server.path +
                                      '/melissa_server ' +
                                      server.cmd_opt ).split()).pid
    os.chdir(STUDY_OPTIONS['working_directory'])

def create_simu(simulation):
    os.chdir(STUDY_OPTIONS['working_directory'])
    if (not os.path.isdir(STUDY_OPTIONS['working_directory']+"/group"+str(simulation.group_id))):
        create_case_str = STUDY_OPTIONS['saturne_path'] + \
                "/code_saturne create --noref -s group" + \
                str(simulation.group_id) + \
                " -c rank0"
        os.system(create_case_str)

    casedir = STUDY_OPTIONS['working_directory']+"/group"+str(simulation.group_id)+"/rank0"
    #os.system("cp "+STUDY_OPTIONS['working_directory']+"/../case1/SCRIPTS/run_saturne.sh "+casedir+"/SCRIPTS/runcase")
    os.chdir(casedir+"/SRC")

    #modif xml file
    tree = etree.parse(STUDY_OPTIONS['working_directory']+'/../case1/DATA/case1.xml')
    root = tree.getroot()
    # modif parameters
    param0 = 'temperature = '+str(simulation.param_set[0][0])+';'
    root.find('thermophysical_models').find('thermal_scalar').find('variable').find('formula').text = param0
    root.find('physical_properties').find('fluid_properties').find("property/[@name='molecular_viscosity']").find('initial_value').text = str(simulation.param_set[0][1])
    root.find('analysis_control').find('output').find("writer/[@label='results']").find("format/[@name='melissa']").set('options',str(simulation.group_id))
    # modif path to mesh file directory
    meshlist = root.find('solution_domain').find('meshes_list')
    if meshlist.find('meshdir') is None:
        meshdir=etree.SubElement(meshlist, 'meshdir')
        meshdir.set('name', '../../MESH')
    else:
        meshlist.find('meshdir').set('name', '../../../MESH')

    # we do that because Code_Saturne needs double quotes...
    xml_str = ('<?xml version="1.0" encoding="utf-8"?>'.encode() +
               etree.tostring(root, encoding="utf-8", pretty_print=True, xml_declaration=False))
    with open(casedir+'/DATA/case1.xml', 'wb') as xml_file:
        xml_file.write(xml_str)

    os.chdir(STUDY_OPTIONS['working_directory'])
    return 0

def launch_simu(simulation):
    os.environ['MELISSA_SERVER_NODE_NAME'] = simulation.server_node_name
    os.chdir(STUDY_OPTIONS['working_directory']+"/group"+str(simulation.group_id)+"/rank0/DATA")
    cmd = STUDY_OPTIONS['saturne_path']+"/code_saturne run -n "+str(NODES_GROUP)+" --param case1.xml"
    simulation.job_id = subprocess.Popen(cmd.split()).pid

def check_job(job):
    state = 0
    try:
        subprocess.check_output(["ps",str(job.job_id)])
        state = 1
    except:
        state = 2
    job.job_status = state

def check_load():
    try:
        time.sleep(1)
        subprocess.check_output(["pidof","cs_solver"])
        return False
    except:
        return True

def kill_job(job):
    os.system('kill '+str(job.job_id))

STUDY_OPTIONS = {}
STUDY_OPTIONS['user_name'] = USERNAME
STUDY_OPTIONS['working_directory'] = '@EXAMPLES_DIR@/fluid_example/STATS'
STUDY_OPTIONS['nb_parameters'] = 2                 # number of varying parameters of the study
STUDY_OPTIONS['sampling_size'] = 300              # initial number of parameter sets
STUDY_OPTIONS['nb_timesteps'] = 75                # number of timesteps, from Melissa point of view
STUDY_OPTIONS['threshold_values'] = 400.0
STUDY_OPTIONS['quantile_values'] = [0.05,0.25,0.5,0.75,0.95]
STUDY_OPTIONS['field_names'] = ["TempC"]           # list of field names
STUDY_OPTIONS['simulation_timeout'] = 400           # simulations are restarted if no life sign for 40 seconds
STUDY_OPTIONS['checkpoint_interval'] = 30          # server checkpoints every 30 seconds
STUDY_OPTIONS['coupling'] = "MELISSA_COUPLING_MPI" # option for Sobol' simulation groups coupling
STUDY_OPTIONS['xml_name'] = "case1.xml"
#STUDY_OPTIONS['saturne_path'] = "Code_Saturne/install/bin"
STUDY_OPTIONS['saturne_path'] = "$SATURNE_PATH/arch/Linux_x86_64/bin"
STUDY_OPTIONS['verbosity'] = 2
STUDY_OPTIONS['batch_size'] = 1
STUDY_OPTIONS['learning'] = True
STUDY_OPTIONS['send_port'] = 2222
STUDY_OPTIONS['recv_port'] = 2223
STUDY_OPTIONS['resp_port'] = 2224
STUDY_OPTIONS['data_port'] = 2225

MELISSA_STATS = {}
MELISSA_STATS['mean'] = True
MELISSA_STATS['variance'] = False
MELISSA_STATS['skewness'] = False
MELISSA_STATS['kurtosis'] = False
MELISSA_STATS['min'] = False
MELISSA_STATS['max'] = False
MELISSA_STATS['threshold_exceedance'] = False
MELISSA_STATS['quantiles'] = False
# This local example does not work for Sobol' indices yet.
MELISSA_STATS['sobol_indices'] = False

USER_FUNCTIONS = {}
USER_FUNCTIONS['create_study'] = None
USER_FUNCTIONS['draw_parameter_set'] = draw_param_set
USER_FUNCTIONS['create_group'] = create_simu
#if MELISSA_STATS['sobol_indices']:
#    USER_FUNCTIONS['launch_group'] = launch_group
#else:
USER_FUNCTIONS['launch_group'] = launch_simu
USER_FUNCTIONS['launch_server'] = launch_server
USER_FUNCTIONS['check_server_job'] = check_job
USER_FUNCTIONS['check_group_job'] = check_job
USER_FUNCTIONS['restart_server'] = launch_server
USER_FUNCTIONS['restart_group'] = None
USER_FUNCTIONS['check_scheduler_load'] = check_load
USER_FUNCTIONS['cancel_job'] = kill_job
USER_FUNCTIONS['postprocessing'] = None
USER_FUNCTIONS['finalize'] = None
