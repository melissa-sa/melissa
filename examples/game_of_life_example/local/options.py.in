###################################################################
#                            Melissa                              #
#-----------------------------------------------------------------#
#   COPYRIGHT (C) 2017  by INRIA and EDF. ALL RIGHTS RESERVED.    #
#                                                                 #
# This source is covered by the BSD 3-Clause License.             #
# Refer to the  LICENSE file for further information.             #
#                                                                 #
#-----------------------------------------------------------------#
#  Original Contributors:                                         #
#    Theophile Terraz,                                            #
#    Bruno Raffin,                                                #
#    Alejandro Ribes,                                             #
#    Bertrand Iooss,                                              #
###################################################################


"""
    User defined options module
"""
import os
import time
import numpy as np
import subprocess
import getpass
import imp
import logging
from string import Template
from shutil import copyfile

#imp.load_source('BaseOptions','@EXAMPLES_DIR@/game_of_life_example/BaseOptions.py')
import examples.game_of_life_example.BaseOptions as BaseOptions

# Standard options
USERNAME = BaseOptions.USERNAME
EXECUTABLE= BaseOptions.EXECUTABLE
NODES_SERVER = 1
NODES_GROUP = 2
NODES_SIMU = NODES_GROUP
BaseOptions.NUMBER_OF_ROWS = 20
BaseOptions.NUMBER_OF_COLUMNS = 20

# Study options
STUDY_OPTIONS = BaseOptions.STUDY_OPTIONS
STUDY_OPTIONS['nb_timesteps'] = 20

#Melissa options
MELISSA_STATS = BaseOptions.MELISSA_STATS


def launch_server(server):
    if (not os.path.isdir(STUDY_OPTIONS['working_directory'])):
        os.mkdir(STUDY_OPTIONS['working_directory'])
    os.chdir(STUDY_OPTIONS['working_directory'])

    command = ' '.join(('mpirun',
                        '-n',
                        str(NODES_SERVER),
                        server.path+"/melissa_server",
                        server.cmd_opt,
                        '&'))

    server.job_id = subprocess.Popen(command.split()).pid
    os.chdir(STUDY_OPTIONS['working_directory'])

def launch_simu(simulation):
    if (not os.path.isdir(STUDY_OPTIONS['working_directory']+"/simu"+str(simulation.group_id))):
        os.mkdir(STUDY_OPTIONS['working_directory']+"/simu"+str(simulation.group_id))
    os.chdir(STUDY_OPTIONS['working_directory']+"/simu"+str(simulation.group_id))

    command = 'mpirun '
    for i, simu_id in enumerate(simulation.simu_id):
        command += ' '.join(('-n',
                             str(NODES_GROUP),
                             '-x',
                             'MELISSA_SIMU_ID='+str(group.simu_id[i]),
                             '@EXAMPLES_DIR@/game_of_life_example/solver/'+EXECUTABLE,
                             str(simu_id),
                            ' '.join(str(j) for j in simulation.param_set[i]),
                            ': '))

    simulation.job_id = subprocess.Popen(command[:-2].split()).pid

    os.chdir(STUDY_OPTIONS['working_directory'])

def check_job(job):
    state = 0
    try:
        subprocess.check_output(["ps",str(job.job_id)])
        state = 1
    except:
        state = 2
    job.job_status = state

def check_load():
    time.sleep(1)
    try:
        out = str(subprocess.check_output(["pidof",EXECUTABLE])).split()
    except:
        return True
    if len(out) > 3:
        return False
    else:
        time.sleep(2)
        return True

def kill_job(job):
    os.system('kill '+str(job.job_id))


USER_FUNCTIONS = {}
USER_FUNCTIONS['create_study'] = None
USER_FUNCTIONS['draw_parameter_set'] = BaseOptions.draw_param_set
USER_FUNCTIONS['create_group'] = None
USER_FUNCTIONS['launch_group'] = launch_simu
USER_FUNCTIONS['launch_server'] = launch_server
USER_FUNCTIONS['check_server_job'] = check_job
USER_FUNCTIONS['check_group_job'] = check_job
USER_FUNCTIONS['restart_server'] = launch_server
USER_FUNCTIONS['restart_group'] = None
USER_FUNCTIONS['check_scheduler_load'] = check_load
USER_FUNCTIONS['cancel_job'] = kill_job
USER_FUNCTIONS['postprocessing'] = None
USER_FUNCTIONS['finalize'] = None
