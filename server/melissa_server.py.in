#!@PYTHON_EXECUTABLE@

###################################################################
#                            Melissa                              #
#-----------------------------------------------------------------#
#   COPYRIGHT (C) 2017  by INRIA and EDF. ALL RIGHTS RESERVED.    #
#                                                                 #
# This source is covered by the BSD 3-Clause License.             #
# Refer to the  LICENSE file for further information.             #
#                                                                 #
#-----------------------------------------------------------------#
#  Original Contributors:                                         #
#    Theophile Terraz,                                            #
#    Bruno Raffin,                                                #
#    Alejandro Ribes,                                             #
#    Bertrand Iooss,                                              #
###################################################################

# -*- coding: utf-8 -*-

"""
    Python sequential version of melissa_server.

    usage:
    python melissa_server.py <options>
"""

import os
import sys
import signal
import imp
import getopt
import numpy as np
from matplotlib import pyplot as plt
import ctypes
from mpi4py import MPI

melissa_server = np.ctypeslib.load_library('libmelissa_server4py','@CMAKE_INSTALL_PREFIX@/lib/libmelissa_server4py.so')

c_char_ptr = ctypes.POINTER(ctypes.c_char)
c_char_ptr_ptr = ctypes.POINTER(c_char_ptr)
c_double_ptr = ctypes.POINTER(ctypes.c_double)
c_void_ptr_ptr = ctypes.POINTER(ctypes.c_void_p)

# size of the training and testing batches
BATCH_SIZE = 32

# Class to transfer data between Python and C
class simulation_data(ctypes.Structure):
    _fields_ = [("simu_id", ctypes.c_int),
                ("parameters", c_double_ptr),
                ("nb_param", ctypes.c_int),
                ("time_stamp", ctypes.c_int),
                ("first_init", ctypes.c_int),
                ("status", ctypes.c_int),
                ("val", c_double_ptr),
                ("val_size", ctypes.c_int),
                ("max_val_size", ctypes.c_int),
                ("nn_path", c_char_ptr)]

def main():


    plot_iter = 0
    plt.ion()
    fig, ax = plt.subplots()
    line1, = ax.plot(0, 1, 'b-')
    ax.set_autoscaley_on(True)

    # handle to a simulation_data structure that will travel between the C calls
    simu_data_ptr = ctypes.POINTER(simulation_data)

    # C prototypes
    melissa_server.melissa_server_init.argtypes = (ctypes.c_int, # argc
                                                   c_char_ptr_ptr, # argv
                                                   c_void_ptr_ptr)

    melissa_server.melissa_server_run.argtypes = (c_void_ptr_ptr,
                                                  simu_data_ptr)

    melissa_server.melissa_server_finalize.argtypes = (c_void_ptr_ptr,
                                                       simu_data_ptr)

    # get the command line
    argc = len(sys.argv)
    argv = (c_char_ptr * (argc + 1))()
    for i, arg in enumerate(sys.argv):
        enc_arg = arg.encode('utf-8')
        argv[i] = ctypes.create_string_buffer(enc_arg)

    #create a handle for the internal server structure (noc used in the Python side)
    server_handle = ctypes.c_void_p()

    data = simulation_data()

    #init the server
    melissa_server.melissa_server_init(argc,
                                       argv,
                                       ctypes.byref(server_handle))

    #run the server, only the first iteration if learning enabled
    melissa_server.melissa_server_run(ctypes.byref(server_handle),
                                      ctypes.byref(data))

    # get the neural network path
    indice = 0
    for i, s in enumerate(sys.argv):
        if '-l' in s:
            indice = i
            break
    if indice > 0:
        nn_path = sys.argv[indice+1]
        imp.load_source("melissa_learning", str(nn_path)+"/melissa_learning.py")
        import melissa_learning
    #get the data from the C structure
    server_status = data.status
    if server_status == 0:
        #buff_val_ptr = ctypes.Py_buffer(getattr(data, 'val'))
        buff_val = data.val[0:data.val_size]
        val_array = np.array(buff_val, float)
        #np.savetxt("addTrSetX_"+str(counter), val_array)
        buff_param = data.parameters[0:data.nb_param]
        param_array = np.array(buff_param, float)
        param_array = np.append(param_array, data.time_stamp)


    i = 0
    j = 0
    k = 0
    cnt = 0
    model_is_init = False

    #The while loop is executed only when doing learning.
    while server_status != 1:
        if server_status == 0:
            if not model_is_init:
                accuracy = []
                print("Vect Size :" + str(len(val_array)))
                learning_handle = melissa_learning.model_init(len(val_array), len(param_array))
                model_is_init = True
                melissa_learning.add_to_training_set(param_array, val_array, learning_handle)
                i += 1
            melissa_server.melissa_server_run(ctypes.byref(server_handle),
                                              ctypes.byref(data))

            #get the data from the C structure. For now, doesn't work for multiple fields
            server_status = data.status
            buff_val = data.val[0:data.val_size]
            val_array = np.array(buff_val, float)
            buff_param = data.parameters[0:data.nb_param]
            param_array = np.array(buff_param, float)
            param_array = np.append(param_array, data.time_stamp)

            if data.val_size == 0:
                pass
            else:

                j += 1
                if j == 8:
                    #add one out of ten result to a testing batch
                    melissa_learning.add_to_testing_set(param_array, val_array, learning_handle)
                    k += 1
                    if k >= BATCH_SIZE:
                        # when the batch is ready, test on it
                        melissa_learning.test_model(learning_handle)
                        res = melissa_learning.test_batch(learning_handle)
                        accuracy.append(res['mae'])
                        line1.set_xdata(np.append(line1.get_xdata(), line1.get_xdata()[-1]+1))
                        line1.set_ydata(np.append(line1.get_ydata(), min(res['mae'], 3000)))
                        ax.relim()
                        ax.autoscale_view()
                        fig.canvas.draw()
                        print("loss test = " + str(res))
                        k = 0
                    j = 0
                else:
                    #add nine out of ten result to a training batch
                    melissa_learning.add_to_training_set(param_array, val_array, learning_handle)
                    cnt += 1
                    melissa_learning.set_learning_rate(learning_handle, int(cnt/BATCH_SIZE), 1000, 0.001, 5000, 0.0005, 12000, 0.0003)
                    #if val_size != getattr(data, 'val_size'):
                        #print 'New val size: '+str(getattr(data, 'val_size'))+'; old val size: '+str(val_size)
                        #new_np_array = np.ctypeslib.as_array(getattr(data, 'val'), shape=(getattr(data, 'val_size'),))
                        #val_size = getattr(data, 'val_size')
                    i += 1
                    if i >= BATCH_SIZE:
                        #print "rank "+str(MPI.COMM_WORLD.Get_rank())+" entering barrier"
                        #MPI.COMM_WORLD.Barrier()
                        #print "rank "+str(MPI.COMM_WORLD.Get_rank())+" leaving barrier"
                        # when the batch is ready, train on it
                        res = melissa_learning.train_batch(learning_handle)
                        accuracy.append(res['mae'])
                        line1.set_xdata(np.append(line1.get_xdata(), line1.get_xdata()[-1]+1))
                        line1.set_ydata(np.append(line1.get_ydata(), min(res['mae'], 3000)))
                        ax.relim()
                        ax.autoscale_view()
                        fig.canvas.draw()
                        print("loss train = " + str(res))
                        i = 0
        elif server_status == 2:
            print("save model")
            if model_is_init:
                melissa_learning.save_model(learning_handle)
                melissa_server.melissa_server_run(ctypes.byref(server_handle),
                                                  ctypes.byref(data))

            #get the data from the C structure. For now, doesn't work for multiple fields
            server_status = data.status
        elif server_status == 3:
            buff_val = data.val[0:data.val_size]
            val_array = np.array(buff_val, float)
            buff_param = data.parameters[0:data.nb_param]
            param_array = np.array(buff_param, float)
            param_array = np.append(param_array, data.time_stamp)
            accuracy = []
            learning_handle = melissa_learning.model_init(len(val_array), len(param_array))
            melissa_learning.read_model(learning_handle, '.', 'model_insitu.h5')
            model_is_init = True
            melissa_learning.add_to_training_set(param_array, val_array, learning_handle)
            i += 1
            melissa_server.melissa_server_run(ctypes.byref(server_handle),
                                              ctypes.byref(data))

            #get the data from the C structure. For now, doesn't work for multiple fields
            server_status = data.status

    print("end server"+str(MPI.COMM_WORLD.Get_rank()))

    ##clear the remaining train and test samples
    print("remaining train samples: " + str(i) + " (rank "+str(MPI.COMM_WORLD.Get_rank())+")")
    if i != 0:
        res = melissa_learning.train_batch(learning_handle)
        accuracy.append(res['mae'])
        print("loss train = " + str(res))
        i = 0

    print("remaining test samples: " + str(k) + " (rank "+str(MPI.COMM_WORLD.Get_rank())+")")
    if k != 0:
        res = melissa_learning.test_batch(learning_handle)
        accuracy.append(res['mae'])
        print("loss test = " + str(res))
        k = 0

    # write the NN
    if model_is_init:
        melissa_learning.save_model(learning_handle)

    if model_is_init:
        #melissa_learning.test_model(learning_handle)

        file = open("accuracy"+str(MPI.COMM_WORLD.Get_rank())+".txt", "w")
        content = ""
        axis = []
        for i, acc in enumerate(accuracy):
            content += str(acc) + "\n"
            accuracy[i] = min(10000, acc)
            axis.append(i)
        file.write(content)
        file.close()

        plt.plot(axis, accuracy)
        plt.show()

    melissa_server.melissa_server_finalize(ctypes.byref(server_handle),
                                           ctypes.byref(data))


if __name__ == '__main__':
    main()
